/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateAttendanceReq,
  HTTPValidationError,
  Meta,
  MetaBase,
  MonthlyAttendance,
  Teacher,
  TeacherBase,
  UpdateAttendanceReq,
} from '../models/index';
import {
    CreateAttendanceReqFromJSON,
    CreateAttendanceReqToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MetaFromJSON,
    MetaToJSON,
    MetaBaseFromJSON,
    MetaBaseToJSON,
    MonthlyAttendanceFromJSON,
    MonthlyAttendanceToJSON,
    TeacherFromJSON,
    TeacherToJSON,
    TeacherBaseFromJSON,
    TeacherBaseToJSON,
    UpdateAttendanceReqFromJSON,
    UpdateAttendanceReqToJSON,
} from '../models/index';

export interface CreateMetaMetasPostRequest {
    metaBase: MetaBase;
}

export interface CreateTeacherTeachersPostRequest {
    teacherBase: TeacherBase;
}

export interface CreateTeachersFromCsvTeachersBulkSchoolIdPostRequest {
    schoolId: string;
    file: Blob;
}

export interface CreateTimeslotsFromClassSheetSalaryBulkSchoolIdPostRequest {
    schoolId: string;
    year: number;
    month: number;
    createAttendanceReq: CreateAttendanceReq;
}

export interface DeleteMetaMetasSchoolIdDeleteRequest {
    schoolId: string;
}

export interface DeleteMonthlySalaryListSalaryBulkSchoolIdDeleteRequest {
    schoolId: string;
    year: number;
    month: number;
}

export interface DeleteTeacherTeachersIdDeleteRequest {
    id: string;
}

export interface GetMetaMetasSchoolIdGetRequest {
    schoolId: string;
}

export interface GetMonthlySalaryListBetweenSalaryBulkSchoolIdBetweenGetRequest {
    schoolId: string;
    startYear: number;
    startMonth: number;
    endYear: number;
    endMonth: number;
}

export interface GetMonthlySalaryListSalaryBulkSchoolIdGetRequest {
    schoolId: string;
    year: number;
    month?: number;
}

export interface GetMonthlySalarySalaryIdGetRequest {
    id: string;
    year: number;
    month: number;
}

export interface GetTeacherFromSubTeachersSubSubGetRequest {
    sub: string;
}

export interface GetTeacherTeachersIdGetRequest {
    id: string;
}

export interface ListTeachersTeachersBulkSchoolIdGetRequest {
    schoolId: string;
}

export interface PostRootTestPostRequest {
    file: Blob;
}

export interface UpdateMetaMetasSchoolIdPutRequest {
    schoolId: string;
    metaBase: MetaBase;
}

export interface UpdateMonthlySalarySalaryIdPutRequest {
    id: string;
    year: number;
    month: number;
    updateAttendanceReq: UpdateAttendanceReq;
}

export interface UpdateTeacherTeachersIdPutRequest {
    id: string;
    teacherBase: TeacherBase;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create Meta
     */
    async createMetaMetasPostRaw(requestParameters: CreateMetaMetasPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Meta>> {
        if (requestParameters['metaBase'] == null) {
            throw new runtime.RequiredError(
                'metaBase',
                'Required parameter "metaBase" was null or undefined when calling createMetaMetasPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/metas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetaBaseToJSON(requestParameters['metaBase']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaFromJSON(jsonValue));
    }

    /**
     * Create Meta
     */
    async createMetaMetasPost(requestParameters: CreateMetaMetasPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Meta> {
        const response = await this.createMetaMetasPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Teacher
     */
    async createTeacherTeachersPostRaw(requestParameters: CreateTeacherTeachersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Teacher>> {
        if (requestParameters['teacherBase'] == null) {
            throw new runtime.RequiredError(
                'teacherBase',
                'Required parameter "teacherBase" was null or undefined when calling createTeacherTeachersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/teachers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeacherBaseToJSON(requestParameters['teacherBase']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherFromJSON(jsonValue));
    }

    /**
     * Create Teacher
     */
    async createTeacherTeachersPost(requestParameters: CreateTeacherTeachersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Teacher> {
        const response = await this.createTeacherTeachersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Teachers From Csv
     */
    async createTeachersFromCsvTeachersBulkSchoolIdPostRaw(requestParameters: CreateTeachersFromCsvTeachersBulkSchoolIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Teacher>>> {
        if (requestParameters['schoolId'] == null) {
            throw new runtime.RequiredError(
                'schoolId',
                'Required parameter "schoolId" was null or undefined when calling createTeachersFromCsvTeachersBulkSchoolIdPost().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling createTeachersFromCsvTeachersBulkSchoolIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/teachers/bulk/{school_id}`.replace(`{${"school_id"}}`, encodeURIComponent(String(requestParameters['schoolId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeacherFromJSON));
    }

    /**
     * Create Teachers From Csv
     */
    async createTeachersFromCsvTeachersBulkSchoolIdPost(requestParameters: CreateTeachersFromCsvTeachersBulkSchoolIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Teacher>> {
        const response = await this.createTeachersFromCsvTeachersBulkSchoolIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Timeslots From Class Sheet
     */
    async createTimeslotsFromClassSheetSalaryBulkSchoolIdPostRaw(requestParameters: CreateTimeslotsFromClassSheetSalaryBulkSchoolIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MonthlyAttendance>>> {
        if (requestParameters['schoolId'] == null) {
            throw new runtime.RequiredError(
                'schoolId',
                'Required parameter "schoolId" was null or undefined when calling createTimeslotsFromClassSheetSalaryBulkSchoolIdPost().'
            );
        }

        if (requestParameters['year'] == null) {
            throw new runtime.RequiredError(
                'year',
                'Required parameter "year" was null or undefined when calling createTimeslotsFromClassSheetSalaryBulkSchoolIdPost().'
            );
        }

        if (requestParameters['month'] == null) {
            throw new runtime.RequiredError(
                'month',
                'Required parameter "month" was null or undefined when calling createTimeslotsFromClassSheetSalaryBulkSchoolIdPost().'
            );
        }

        if (requestParameters['createAttendanceReq'] == null) {
            throw new runtime.RequiredError(
                'createAttendanceReq',
                'Required parameter "createAttendanceReq" was null or undefined when calling createTimeslotsFromClassSheetSalaryBulkSchoolIdPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/salary/bulk/{school_id}`.replace(`{${"school_id"}}`, encodeURIComponent(String(requestParameters['schoolId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAttendanceReqToJSON(requestParameters['createAttendanceReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MonthlyAttendanceFromJSON));
    }

    /**
     * Create Timeslots From Class Sheet
     */
    async createTimeslotsFromClassSheetSalaryBulkSchoolIdPost(requestParameters: CreateTimeslotsFromClassSheetSalaryBulkSchoolIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MonthlyAttendance>> {
        const response = await this.createTimeslotsFromClassSheetSalaryBulkSchoolIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Meta
     */
    async deleteMetaMetasSchoolIdDeleteRaw(requestParameters: DeleteMetaMetasSchoolIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Meta>> {
        if (requestParameters['schoolId'] == null) {
            throw new runtime.RequiredError(
                'schoolId',
                'Required parameter "schoolId" was null or undefined when calling deleteMetaMetasSchoolIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/metas/{school_id}`.replace(`{${"school_id"}}`, encodeURIComponent(String(requestParameters['schoolId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaFromJSON(jsonValue));
    }

    /**
     * Delete Meta
     */
    async deleteMetaMetasSchoolIdDelete(requestParameters: DeleteMetaMetasSchoolIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Meta> {
        const response = await this.deleteMetaMetasSchoolIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Monthly Salary List
     */
    async deleteMonthlySalaryListSalaryBulkSchoolIdDeleteRaw(requestParameters: DeleteMonthlySalaryListSalaryBulkSchoolIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MonthlyAttendance>>> {
        if (requestParameters['schoolId'] == null) {
            throw new runtime.RequiredError(
                'schoolId',
                'Required parameter "schoolId" was null or undefined when calling deleteMonthlySalaryListSalaryBulkSchoolIdDelete().'
            );
        }

        if (requestParameters['year'] == null) {
            throw new runtime.RequiredError(
                'year',
                'Required parameter "year" was null or undefined when calling deleteMonthlySalaryListSalaryBulkSchoolIdDelete().'
            );
        }

        if (requestParameters['month'] == null) {
            throw new runtime.RequiredError(
                'month',
                'Required parameter "month" was null or undefined when calling deleteMonthlySalaryListSalaryBulkSchoolIdDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/salary/bulk/{school_id}`.replace(`{${"school_id"}}`, encodeURIComponent(String(requestParameters['schoolId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MonthlyAttendanceFromJSON));
    }

    /**
     * Delete Monthly Salary List
     */
    async deleteMonthlySalaryListSalaryBulkSchoolIdDelete(requestParameters: DeleteMonthlySalaryListSalaryBulkSchoolIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MonthlyAttendance>> {
        const response = await this.deleteMonthlySalaryListSalaryBulkSchoolIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Teacher
     */
    async deleteTeacherTeachersIdDeleteRaw(requestParameters: DeleteTeacherTeachersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Teacher>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTeacherTeachersIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teachers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherFromJSON(jsonValue));
    }

    /**
     * Delete Teacher
     */
    async deleteTeacherTeachersIdDelete(requestParameters: DeleteTeacherTeachersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Teacher> {
        const response = await this.deleteTeacherTeachersIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Meta
     */
    async getMetaMetasSchoolIdGetRaw(requestParameters: GetMetaMetasSchoolIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Meta>> {
        if (requestParameters['schoolId'] == null) {
            throw new runtime.RequiredError(
                'schoolId',
                'Required parameter "schoolId" was null or undefined when calling getMetaMetasSchoolIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/metas/{school_id}`.replace(`{${"school_id"}}`, encodeURIComponent(String(requestParameters['schoolId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaFromJSON(jsonValue));
    }

    /**
     * Get Meta
     */
    async getMetaMetasSchoolIdGet(requestParameters: GetMetaMetasSchoolIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Meta> {
        const response = await this.getMetaMetasSchoolIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Monthly Salary List Between
     */
    async getMonthlySalaryListBetweenSalaryBulkSchoolIdBetweenGetRaw(requestParameters: GetMonthlySalaryListBetweenSalaryBulkSchoolIdBetweenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MonthlyAttendance>>> {
        if (requestParameters['schoolId'] == null) {
            throw new runtime.RequiredError(
                'schoolId',
                'Required parameter "schoolId" was null or undefined when calling getMonthlySalaryListBetweenSalaryBulkSchoolIdBetweenGet().'
            );
        }

        if (requestParameters['startYear'] == null) {
            throw new runtime.RequiredError(
                'startYear',
                'Required parameter "startYear" was null or undefined when calling getMonthlySalaryListBetweenSalaryBulkSchoolIdBetweenGet().'
            );
        }

        if (requestParameters['startMonth'] == null) {
            throw new runtime.RequiredError(
                'startMonth',
                'Required parameter "startMonth" was null or undefined when calling getMonthlySalaryListBetweenSalaryBulkSchoolIdBetweenGet().'
            );
        }

        if (requestParameters['endYear'] == null) {
            throw new runtime.RequiredError(
                'endYear',
                'Required parameter "endYear" was null or undefined when calling getMonthlySalaryListBetweenSalaryBulkSchoolIdBetweenGet().'
            );
        }

        if (requestParameters['endMonth'] == null) {
            throw new runtime.RequiredError(
                'endMonth',
                'Required parameter "endMonth" was null or undefined when calling getMonthlySalaryListBetweenSalaryBulkSchoolIdBetweenGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startYear'] != null) {
            queryParameters['start_year'] = requestParameters['startYear'];
        }

        if (requestParameters['startMonth'] != null) {
            queryParameters['start_month'] = requestParameters['startMonth'];
        }

        if (requestParameters['endYear'] != null) {
            queryParameters['end_year'] = requestParameters['endYear'];
        }

        if (requestParameters['endMonth'] != null) {
            queryParameters['end_month'] = requestParameters['endMonth'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/salary/bulk/{school_id}/between`.replace(`{${"school_id"}}`, encodeURIComponent(String(requestParameters['schoolId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MonthlyAttendanceFromJSON));
    }

    /**
     * Get Monthly Salary List Between
     */
    async getMonthlySalaryListBetweenSalaryBulkSchoolIdBetweenGet(requestParameters: GetMonthlySalaryListBetweenSalaryBulkSchoolIdBetweenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MonthlyAttendance>> {
        const response = await this.getMonthlySalaryListBetweenSalaryBulkSchoolIdBetweenGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Monthly Salary List
     */
    async getMonthlySalaryListSalaryBulkSchoolIdGetRaw(requestParameters: GetMonthlySalaryListSalaryBulkSchoolIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MonthlyAttendance>>> {
        if (requestParameters['schoolId'] == null) {
            throw new runtime.RequiredError(
                'schoolId',
                'Required parameter "schoolId" was null or undefined when calling getMonthlySalaryListSalaryBulkSchoolIdGet().'
            );
        }

        if (requestParameters['year'] == null) {
            throw new runtime.RequiredError(
                'year',
                'Required parameter "year" was null or undefined when calling getMonthlySalaryListSalaryBulkSchoolIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/salary/bulk/{school_id}`.replace(`{${"school_id"}}`, encodeURIComponent(String(requestParameters['schoolId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MonthlyAttendanceFromJSON));
    }

    /**
     * Get Monthly Salary List
     */
    async getMonthlySalaryListSalaryBulkSchoolIdGet(requestParameters: GetMonthlySalaryListSalaryBulkSchoolIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MonthlyAttendance>> {
        const response = await this.getMonthlySalaryListSalaryBulkSchoolIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Monthly Salary
     */
    async getMonthlySalarySalaryIdGetRaw(requestParameters: GetMonthlySalarySalaryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonthlyAttendance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMonthlySalarySalaryIdGet().'
            );
        }

        if (requestParameters['year'] == null) {
            throw new runtime.RequiredError(
                'year',
                'Required parameter "year" was null or undefined when calling getMonthlySalarySalaryIdGet().'
            );
        }

        if (requestParameters['month'] == null) {
            throw new runtime.RequiredError(
                'month',
                'Required parameter "month" was null or undefined when calling getMonthlySalarySalaryIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/salary/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonthlyAttendanceFromJSON(jsonValue));
    }

    /**
     * Get Monthly Salary
     */
    async getMonthlySalarySalaryIdGet(requestParameters: GetMonthlySalarySalaryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonthlyAttendance> {
        const response = await this.getMonthlySalarySalaryIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Teacher From Sub
     */
    async getTeacherFromSubTeachersSubSubGetRaw(requestParameters: GetTeacherFromSubTeachersSubSubGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Teacher>> {
        if (requestParameters['sub'] == null) {
            throw new runtime.RequiredError(
                'sub',
                'Required parameter "sub" was null or undefined when calling getTeacherFromSubTeachersSubSubGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teachers/sub/{sub}`.replace(`{${"sub"}}`, encodeURIComponent(String(requestParameters['sub']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherFromJSON(jsonValue));
    }

    /**
     * Get Teacher From Sub
     */
    async getTeacherFromSubTeachersSubSubGet(requestParameters: GetTeacherFromSubTeachersSubSubGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Teacher> {
        const response = await this.getTeacherFromSubTeachersSubSubGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Teacher
     */
    async getTeacherTeachersIdGetRaw(requestParameters: GetTeacherTeachersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Teacher>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTeacherTeachersIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teachers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherFromJSON(jsonValue));
    }

    /**
     * Get Teacher
     */
    async getTeacherTeachersIdGet(requestParameters: GetTeacherTeachersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Teacher> {
        const response = await this.getTeacherTeachersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Metas
     */
    async listMetasMetasGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Meta>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/metas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MetaFromJSON));
    }

    /**
     * List Metas
     */
    async listMetasMetasGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Meta>> {
        const response = await this.listMetasMetasGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List Teachers
     */
    async listTeachersTeachersBulkSchoolIdGetRaw(requestParameters: ListTeachersTeachersBulkSchoolIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Teacher>>> {
        if (requestParameters['schoolId'] == null) {
            throw new runtime.RequiredError(
                'schoolId',
                'Required parameter "schoolId" was null or undefined when calling listTeachersTeachersBulkSchoolIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teachers/bulk/{school_id}`.replace(`{${"school_id"}}`, encodeURIComponent(String(requestParameters['schoolId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeacherFromJSON));
    }

    /**
     * List Teachers
     */
    async listTeachersTeachersBulkSchoolIdGet(requestParameters: ListTeachersTeachersBulkSchoolIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Teacher>> {
        const response = await this.listTeachersTeachersBulkSchoolIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Post Root
     */
    async postRootTestPostRaw(requestParameters: PostRootTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling postRootTestPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/test/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Post Root
     */
    async postRootTestPost(requestParameters: PostRootTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.postRootTestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Root
     */
    async rootGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Root
     */
    async rootGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.rootGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update Meta
     */
    async updateMetaMetasSchoolIdPutRaw(requestParameters: UpdateMetaMetasSchoolIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Meta>> {
        if (requestParameters['schoolId'] == null) {
            throw new runtime.RequiredError(
                'schoolId',
                'Required parameter "schoolId" was null or undefined when calling updateMetaMetasSchoolIdPut().'
            );
        }

        if (requestParameters['metaBase'] == null) {
            throw new runtime.RequiredError(
                'metaBase',
                'Required parameter "metaBase" was null or undefined when calling updateMetaMetasSchoolIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/metas/{school_id}`.replace(`{${"school_id"}}`, encodeURIComponent(String(requestParameters['schoolId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MetaBaseToJSON(requestParameters['metaBase']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaFromJSON(jsonValue));
    }

    /**
     * Update Meta
     */
    async updateMetaMetasSchoolIdPut(requestParameters: UpdateMetaMetasSchoolIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Meta> {
        const response = await this.updateMetaMetasSchoolIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Monthly Salary
     */
    async updateMonthlySalarySalaryIdPutRaw(requestParameters: UpdateMonthlySalarySalaryIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonthlyAttendance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateMonthlySalarySalaryIdPut().'
            );
        }

        if (requestParameters['year'] == null) {
            throw new runtime.RequiredError(
                'year',
                'Required parameter "year" was null or undefined when calling updateMonthlySalarySalaryIdPut().'
            );
        }

        if (requestParameters['month'] == null) {
            throw new runtime.RequiredError(
                'month',
                'Required parameter "month" was null or undefined when calling updateMonthlySalarySalaryIdPut().'
            );
        }

        if (requestParameters['updateAttendanceReq'] == null) {
            throw new runtime.RequiredError(
                'updateAttendanceReq',
                'Required parameter "updateAttendanceReq" was null or undefined when calling updateMonthlySalarySalaryIdPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/salary/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAttendanceReqToJSON(requestParameters['updateAttendanceReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonthlyAttendanceFromJSON(jsonValue));
    }

    /**
     * Update Monthly Salary
     */
    async updateMonthlySalarySalaryIdPut(requestParameters: UpdateMonthlySalarySalaryIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonthlyAttendance> {
        const response = await this.updateMonthlySalarySalaryIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Teacher
     */
    async updateTeacherTeachersIdPutRaw(requestParameters: UpdateTeacherTeachersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Teacher>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTeacherTeachersIdPut().'
            );
        }

        if (requestParameters['teacherBase'] == null) {
            throw new runtime.RequiredError(
                'teacherBase',
                'Required parameter "teacherBase" was null or undefined when calling updateTeacherTeachersIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/teachers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TeacherBaseToJSON(requestParameters['teacherBase']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherFromJSON(jsonValue));
    }

    /**
     * Update Teacher
     */
    async updateTeacherTeachersIdPut(requestParameters: UpdateTeacherTeachersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Teacher> {
        const response = await this.updateTeacherTeachersIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
